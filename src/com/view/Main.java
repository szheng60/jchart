/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.model.Excel;
import com.model.Receiving;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.ui.RectangleInsets;

/**
 *
 * @author song
 */
public class Main extends javax.swing.JFrame {
    private Excel theExcel;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        viewGraphButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        filePathTextField = new javax.swing.JTextField();
        filePathBrowseButton = new javax.swing.JButton();
        filePathRunButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel.setBackground(new java.awt.Color(153, 153, 153));
        panel.setLayout(new java.awt.BorderLayout());

        viewGraphButton.setText("View");
        viewGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGraphButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("File Path:");

        filePathTextField.setEditable(false);

        filePathBrowseButton.setText("Browse");
        filePathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathBrowseButtonActionPerformed(evt);
            }
        });

        filePathRunButton.setText("Run");
        filePathRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathRunButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewGraphButton)
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filePathBrowseButton)
                .addGap(18, 18, 18)
                .addComponent(filePathRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filePathBrowseButton)
                    .addComponent(filePathRunButton))
                .addGap(4, 4, 4)
                .addComponent(viewGraphButton)
                .addGap(0, 52, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void viewGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGraphButtonActionPerformed
        TimeSeries item1_xy_data = new TimeSeries("Item1");
        TimeSeries item2_xy_data = new TimeSeries("Item2");
        TimeSeries item3_xy_data = new TimeSeries("Item3");
        Receiving theReceiving[] = this.theExcel.getSheetReceiving();
        
        HashMap<Month, Integer> item1Map = new HashMap<>();
        HashMap<Month, Integer> item2Map = new HashMap<>();
        HashMap<Month, Integer> item3Map = new HashMap<>();
        Calendar cal = Calendar.getInstance();
        for (int i = 0; i < theReceiving.length; i++)
        {
            cal.setTime(theReceiving[i].getDate());
            int month = cal.get(Calendar.MONTH) + 1;
            int year = cal.get(Calendar.YEAR);
            int quantity = theReceiving[i].getQuantity();
            Month theMonth = new Month(month, year);            
            
            if (theReceiving[i].getItem() == 1)
            {
                item1Map.put(theMonth, updateItemMap(item1Map, theMonth, quantity));
            }
            else if (theReceiving[i].getItem() == 2)
            {
                item2Map.put(theMonth, updateItemMap(item2Map, theMonth, quantity));
            }
            else if (theReceiving[i].getItem() == 3)
            {
                item3Map.put(theMonth, updateItemMap(item3Map, theMonth, quantity));
            }
        }
        for (Map.Entry<Month, Integer> entry:item1Map.entrySet()) {
            item1_xy_data.add(entry.getKey(), entry.getValue());
        }
        for (Map.Entry<Month, Integer> entry:item2Map.entrySet()) {
            item2_xy_data.add(entry.getKey(), entry.getValue());
        }
        for (Map.Entry<Month, Integer> entry:item3Map.entrySet()) {
            item3_xy_data.add(entry.getKey(), entry.getValue());
        }
        
        TimeSeriesCollection my_data_series = new TimeSeriesCollection();
        // add series using addSeries method
        my_data_series.addSeries(item1_xy_data);
        my_data_series.addSeries(item2_xy_data);
        my_data_series.addSeries(item3_xy_data);        
        JFreeChart chart = ChartFactory.createTimeSeriesChart("Receiving","Month","Quantity",my_data_series,true,true,false);        
        chart.setBackgroundPaint(Color.YELLOW);
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        plot.setDomainGridlinePaint(Color.GREEN);
        plot.setRangeGridlinePaint(Color.orange);
        plot.setAxisOffset(new RectangleInsets(50, 0, 20, 5));
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairVisible (true);   

        XYLineAndShapeRenderer  renderer = (XYLineAndShapeRenderer) plot.getRenderer();      

        renderer.setBaseShapesVisible(true);
        renderer.setBaseShapesFilled (true);                               

        DateAxis axis = (DateAxis) plot.getDomainAxis();
        axis.setDateFormatOverride(new SimpleDateFormat("MM.yyyy"));
        
        ChartPanel chartPanel = new ChartPanel(chart);
        panel.removeAll();
        panel.add(chartPanel, BorderLayout.CENTER);
        panel.validate();      

    }//GEN-LAST:event_viewGraphButtonActionPerformed
    private int updateItemMap(HashMap<Month, Integer> itemMap, Month theMonth, int quantity) {
        int quan = 0;
        if (itemMap.containsKey(theMonth)) {
            int temp = itemMap.get(theMonth);
            temp += quantity;
            quan = temp;
        }    
        return quan;
    }
    private void filePathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathBrowseButtonActionPerformed
        final JFileChooser fileChooser = new JFileChooser(".");
        final FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files", "xlsx", "xls");
        fileChooser.addChoosableFileFilter(filter);
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showDialog(this, "choose a file");
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            filePathTextField.setText(selectedFile.getAbsolutePath());
        }
        
    }//GEN-LAST:event_filePathBrowseButtonActionPerformed

    private void filePathRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathRunButtonActionPerformed
        String filePath = filePathTextField.getText();
        
        try {
            this.theExcel = new Excel(filePath);
            theExcel.initialize();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_filePathRunButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filePathBrowseButton;
    private javax.swing.JButton filePathRunButton;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panel;
    private javax.swing.JButton viewGraphButton;
    // End of variables declaration//GEN-END:variables
}
